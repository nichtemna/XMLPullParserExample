package com.nichtemna.saponify.models;

import android.content.ContentValues;
import android.database.Cursor;
import android.os.Parcel;
import android.os.Parcelable;
import com.nichtemna.saponify.db.entities.RecipeEntity;
import com.nichtemna.saponify.db.entities.RecipeOilEntity;
import com.nichtemna.saponify.utils.consts.Enums;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Shishova Galina on 09.04.14.
 * nichtemna@gmail.com
 */
public class Recipe extends BaseModel implements Parcelable, Xmlable {
    public long mId;
    public long mTimestamp;
    public String mTitle;
    public String mNotes;
    public Enums.Lye mLyeType;
    public LiquidInRecipe mLiquidInRecipe;
    public double mTotalOilsWeightInGrams;
    public double mSuperFatPercents;
    public double mSap;
    public List<Oil> mOils = new ArrayList<Oil>();
    public int mRating;

    //recounting
    public double mLeyWeightInGrams;
    public double mLiquidWeightInGrams;
    public double mSuperFatWeightInGrams;


    public Recipe() {
    }

    public Recipe(Cursor pCursor) {
        super(pCursor);
    }

    @Override
    public ContentValues toContentValues() {
        ContentValues contentValues = new ContentValues();
        contentValues.put(RecipeEntity.TITLE, mTitle);
        contentValues.put(RecipeEntity.NOTES, mNotes);
        contentValues.put(RecipeEntity.TIMESTAMP, mTimestamp);
        contentValues.put(RecipeEntity.LYE_TYPE, mLyeType.ordinal());
        contentValues.put(RecipeEntity.SAP, mSap);
        contentValues.put(RecipeEntity.TOTAL_WEIGHT, mTotalOilsWeightInGrams);
        contentValues.put(RecipeEntity.LIQUID_TYPE, mLiquidInRecipe.mLiquid.ordinal());
        contentValues.put(RecipeEntity.LIQUID_FIRST_VALUE, mLiquidInRecipe.mLiquidFirstValue);
        contentValues.put(RecipeEntity.LIQUID_SECOND_VALUE, mLiquidInRecipe.mLiquidSecondValue);
        contentValues.put(RecipeEntity.LIQUID_ID, mLiquidInRecipe.mLiquidTypeId);
        contentValues.put(RecipeEntity.SUPER_FAT_PERCENTS, mSuperFatPercents);
        contentValues.put(RecipeEntity.RATING, mRating);
        return contentValues;
    }

    public ContentValues oilsForRecipeToContentValues(int position, long pRecipeId) {
        ContentValues contentValues = new ContentValues();
        contentValues.put(RecipeOilEntity.RECIPE_ID, pRecipeId);
        contentValues.put(RecipeOilEntity.OIL_ID, mOils.get(position).mId);
        contentValues.put(RecipeOilEntity.PERCENTS, mOils.get(position).mAmountInPercents);
        return contentValues;
    }

    @Override
    protected void fromCursor(Cursor pCursor) {
        int i = pCursor.getColumnIndex(RecipeEntity._ID);
        if (i != -1) {
            mId = pCursor.getLong(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.TIMESTAMP);
        if (i != -1) {
            mTimestamp = pCursor.getLong(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.TITLE);
        if (i != -1) {
            mTitle = pCursor.getString(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.NOTES);
        if (i != -1) {
            mNotes = pCursor.getString(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.LYE_TYPE);
        if (i != -1) {
            mLyeType = Enums.Lye.values()[pCursor.getInt(i)];
        }
        i = pCursor.getColumnIndex(RecipeEntity.SAP);
        if (i != -1) {
            mSap = pCursor.getDouble(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.TOTAL_WEIGHT);
        if (i != -1) {
            mTotalOilsWeightInGrams = pCursor.getDouble(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.LIQUID_TYPE);
        if (i != -1) {
            Enums.Liquid liquid = Enums.Liquid.values()[pCursor.getInt(i)];
            mLiquidInRecipe = new LiquidInRecipe(liquid);

            i = pCursor.getColumnIndex(RecipeEntity.LIQUID_FIRST_VALUE);
            if (i != -1) {
                mLiquidInRecipe.mLiquidFirstValue = pCursor.getDouble(i);
            }

            i = pCursor.getColumnIndex(RecipeEntity.LIQUID_SECOND_VALUE);
            if (i != -1) {
                mLiquidInRecipe.mLiquidSecondValue = pCursor.getDouble(i);
            }

            i = pCursor.getColumnIndex(RecipeEntity.LIQUID_ID);
            if (i != -1) {
                mLiquidInRecipe.mLiquidTypeId = pCursor.getLong(i);
            }
        }
        i = pCursor.getColumnIndex(RecipeEntity.SUPER_FAT_PERCENTS);
        if (i != -1) {
            mSuperFatPercents = pCursor.getDouble(i);
        }
        i = pCursor.getColumnIndex(RecipeEntity.RATING);
        if (i != -1) {
            mRating = pCursor.getInt(i);
        }
        mOils = new ArrayList<Oil>();
    }

    public void setOils(ArrayList<Oil> pOils) {
        mOils = pOils;
    }

    public void recalculateRecipe() {
        recalculateTotalWeight();

        recalculateSap();

        mSuperFatWeightInGrams = mTotalOilsWeightInGrams / 100 * mSuperFatPercents;

        mLeyWeightInGrams = (mTotalOilsWeightInGrams - mSuperFatWeightInGrams) * mSap;

        recalculateLiquidWeight();
    }

    private void recalculateSap() {
        mSap = 0;
        for (Oil oil : mOils) {
            mSap += ((mLyeType == Enums.Lye.NAOH ? oil.mSapNaoh : oil.mSapKoh) / 100) * oil.mAmountInPercents;
        }
    }

    private void recalculateLiquidWeight() {
        switch (mLiquidInRecipe.mLiquid) {
            case LIQUID_PERCENT:
                mLiquidWeightInGrams = mTotalOilsWeightInGrams / 100 * mLiquidInRecipe.mLiquidFirstValue;
                break;

            case LYE_PERCENT:
                mLiquidWeightInGrams = (mLeyWeightInGrams / mLiquidInRecipe.mLiquidFirstValue) * (100 - mLiquidInRecipe.mLiquidFirstValue);
                break;

            case LIQUID_LYE_RATIO:
                mLiquidWeightInGrams = mLeyWeightInGrams / mLiquidInRecipe.mLiquidSecondValue * mLiquidInRecipe.mLiquidFirstValue;
                break;

            default:
                break;
        }
    }

    private void recalculateTotalWeight() {
        mTotalOilsWeightInGrams = 0;
        for (Oil oil : mOils) {
            mTotalOilsWeightInGrams += oil.getAmountInUnit(Enums.Units.GRAMS);
        }
    }

    public void setNewTotalWeight(double pNewTotalWeight) {
        for (Oil oil : mOils) {
            oil.mAmountInGrams = pNewTotalWeight / 100 * oil.mAmountInPercents;
        }
    }

    public static String getSortOrderByListPosition(int pPosition) {
        switch (pPosition) {
            case 0:
                return RecipeEntity.SORT_ORDER_RATING;

            case 1:
                return RecipeEntity.SORT_ORDER_DATE;

            case 2:
                return RecipeEntity.SORT_ORDER_TOTAL_WEIGHT;

            default:
                throw new IllegalArgumentException("No option for position: " + pPosition);
        }
    }

    //***************** Parselable ***************************

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(this.mId);
        dest.writeLong(this.mTimestamp);
        dest.writeString(this.mTitle);
        dest.writeString(this.mNotes);
        dest.writeInt(this.mLyeType == null ? -1 : this.mLyeType.ordinal());
        dest.writeParcelable(this.mLiquidInRecipe, flags);
        dest.writeDouble(this.mTotalOilsWeightInGrams);
        dest.writeDouble(this.mSuperFatPercents);
        dest.writeDouble(this.mSap);
        dest.writeList(this.mOils);
        dest.writeInt(this.mRating);
        dest.writeDouble(this.mLeyWeightInGrams);
        dest.writeDouble(this.mLiquidWeightInGrams);
        dest.writeDouble(this.mSuperFatWeightInGrams);
    }

    private Recipe(Parcel in) {
        this.mId = in.readLong();
        this.mTimestamp = in.readLong();
        this.mTitle = in.readString();
        this.mNotes = in.readString();
        int tmpMLyeType = in.readInt();
        this.mLyeType = tmpMLyeType == -1 ? null : Enums.Lye.values()[tmpMLyeType];
        this.mLiquidInRecipe = in.readParcelable(LiquidInRecipe.class.getClassLoader());
        this.mTotalOilsWeightInGrams = in.readDouble();
        this.mSuperFatPercents = in.readDouble();
        this.mSap = in.readDouble();
        this.mOils = new ArrayList<Oil>();
        in.readList(this.mOils, Oil.class.getClassLoader());
        this.mRating = in.readInt();
        this.mLeyWeightInGrams = in.readDouble();
        this.mLiquidWeightInGrams = in.readDouble();
        this.mSuperFatWeightInGrams = in.readDouble();
    }

    public static Creator<Recipe> CREATOR = new Creator<Recipe>() {
        public Recipe createFromParcel(Parcel source) {
            return new Recipe(source);
        }

        public Recipe[] newArray(int size) {
            return new Recipe[size];
        }
    };

    //***************** Override equals and hashcode ***************************

    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (obj == this)
            return true;
        if (!(obj instanceof Recipe))
            return false;


        Recipe recipe = (Recipe) obj;

        boolean oilsEquals = true;
        for (int i = 0; i < recipe.mOils.size(); i++) {
            if (!mOils.get(i).equals(recipe.mOils.get(i))) {
                oilsEquals = false;
            }
        }
        return oilsEquals
                && mId == recipe.mId
                && mTitle.equals(recipe.mTitle)
                && mNotes.equals(recipe.mNotes)
                && mLyeType == recipe.mLyeType
                && mLiquidInRecipe == recipe.mLiquidInRecipe
                && mTotalOilsWeightInGrams == recipe.mTotalOilsWeightInGrams
                && mSuperFatPercents == recipe.mSuperFatPercents
                && mSap == recipe.mSap;
    }

    public int hashCode() {
        return new HashCodeBuilder(mLyeType.getTitleResourceId(), 10000 * mLyeType.getTitleResourceId()).append(mId).append(mSap).toHashCode();
    }

    //***************** XML ***************************

    @Override
    public void toXml(XmlSerializer pXmlSerializer) throws IOException {
        pXmlSerializer.startTag("", RecipeEntity.ROW);

        pXmlSerializer.startTag("", RecipeEntity._ID).text(String.valueOf(mId)).endTag("", RecipeEntity._ID);
        pXmlSerializer.startTag("", RecipeEntity.TITLE).text(mTitle).endTag("", RecipeEntity.TITLE);
        pXmlSerializer.startTag("", RecipeEntity.NOTES).text(mNotes).endTag("", RecipeEntity.NOTES);
        pXmlSerializer.startTag("", RecipeEntity.TIMESTAMP).text(String.valueOf(mTimestamp)).endTag("", RecipeEntity.TIMESTAMP);
        pXmlSerializer.startTag("", RecipeEntity.LYE_TYPE).text(String.valueOf(mLyeType.ordinal())).endTag("", RecipeEntity.LYE_TYPE);
        pXmlSerializer.startTag("", RecipeEntity.SAP).text(String.valueOf(mSap)).endTag("", RecipeEntity.SAP);
        pXmlSerializer.startTag("", RecipeEntity.TOTAL_WEIGHT).text(String.valueOf(mTotalOilsWeightInGrams)).endTag("", RecipeEntity.TOTAL_WEIGHT);
        pXmlSerializer.startTag("", RecipeEntity.LIQUID_TYPE).text(String.valueOf(mLiquidInRecipe.mLiquid.ordinal())).endTag("", RecipeEntity.LIQUID_TYPE);
        pXmlSerializer.startTag("", RecipeEntity.LIQUID_FIRST_VALUE).text(String.valueOf(mLiquidInRecipe.mLiquidFirstValue)).endTag("", RecipeEntity.LIQUID_FIRST_VALUE);
        pXmlSerializer.startTag("", RecipeEntity.LIQUID_SECOND_VALUE).text(String.valueOf(mLiquidInRecipe.mLiquidSecondValue)).endTag("", RecipeEntity.LIQUID_SECOND_VALUE);
        pXmlSerializer.startTag("", RecipeEntity.LIQUID_ID).text(String.valueOf(mLiquidInRecipe.mLiquidTypeId)).endTag("", RecipeEntity.LIQUID_ID);
        pXmlSerializer.startTag("", RecipeEntity.SUPER_FAT_PERCENTS).text(String.valueOf(mSuperFatPercents)).endTag("", RecipeEntity.SUPER_FAT_PERCENTS);
        pXmlSerializer.startTag("", RecipeEntity.RATING).text(String.valueOf(mRating)).endTag("", RecipeEntity.RATING);

        pXmlSerializer.endTag("", RecipeEntity.ROW);
    }

}
